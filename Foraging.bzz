# Swarm Final Project

numRobots = 20
DoneTable = 1
var another_counter = 0

function reset_led() {
	var counter = 0
	while (counter < 11){
		counter = counter + 1
		set_led(0, 0, 0, 0)
	}
}

function set_top_led() {
	reset_led()
	set_led(12,255,255,255)
}

function set_led_half(start) {
	reset_led()
	if(id == 1){
		log(start)
	}
	var counter = 0.0
	
	while (counter < 6.0) {

		if ((counter + start) > 11.0) {
			set_led((counter + start) - 12.0, 0, 255, 0)
		} else {
			set_led(counter + start, 0, 255, 0)
		}

		if ((counter + start + 6.0) > 11.0) {
			set_led((counter + start) - 6.0, 255, 0, 0)
		} else {
			set_led(counter + start + 6.0, 255, 0, 0)
		}

		counter = counter + 1.0
	} 
}

# Call a specific random walk
function random_walk() {
	obstacle_avoidance()
}

function obstacle_avoidance() {
	var magnitude = 5.0
	#log("Obstacle avoiding")
		var problem = read_proximity().problem_a
		#log(problem)
		# Decide whether to turn left or right
		x = magnitude * math.cos(math.pi + problem)
		y = magnitude * math.sin(math.pi + problem)
	
		# If angle is behind robot, nothing is detected
		if (problem == -math.pi) {
			# Nothing is detected
			set_wheels(magnitude, magnitude)
		}	 else {
		
			# Something is detected
			#	Isolate near 0 cases to avoid errors
			if (x < 0.000001 and x > -0.000001){
				x = 0
			}

			if (y < 0.000001 and y > -0.000001){
				y = 0
			}

			# log("Wheel Speed X: ", x)
			# log("Wheel Speed Y: ", y)
			# Go to point that is opposite side from obstacle
			gotoc(x / 2, y / 2)
			#gotop(1,  
		}
}

function read_proximity() {

	# Iterate through all the proximity sensors, find detections
	var counter = 0
	
	var max_reading = 0.0
	var problem_angle = -math.pi

	while (counter < 23 and (loop_counter < 3 or loop_counter > 21)) {
		var frontValue = proximity[counter].value
		var frontAngle = proximity[counter].angle
		if (frontValue > max_reading) {
			max_reading = frontValue
			problem_angle = frontAngle # log the problem angle
			#log("Obstacle detected in front of Sensor: ", counter)
			#log("Reading: ", max_reading, " Angle: ", frontAngle)
		}
		counter = counter + 1
	}
	
	# Setup the return table
	t = { .max_r = max_reading, .problem_a = problem_angle}
	return t
}

# determine_half()
function determine_half(point) {
	x = point.x
 	y = point.y
	a_pose = pose.position
	our_x = a_pose.x
	our_y = a_pose.y

	#our_angle = -pose.orientation.yaw
	our_angle = pose.orientation.yaw

	if (our_angle < 0.0) {
		our_angle = our_angle + 2 * math.pi
	}
	
		angle_to_point = math.atan(-our_y + y, -our_x + x)

	
	if (angle_to_point < 0) {
		angle_to_point = angle_to_point + 2 * math.pi
	}

	rel_angle = (angle_to_point - our_angle) 
	return_ang = rel_angle + (math.pi / 2)
	
	if (return_ang < 0) {
		return_ang = return_ang + 2 * math.pi
	}
	if (return_ang > 2 * math.pi) {
		return_ang = return_ang - 2 * math.pi
	}
	set_led_half(return_ang * 1.90985)
}

# Initialization
function init(){
	camera_enable()
	#v = stigmergy.create(DoneTable) 
	#v.put(DoneTable, {})
}

#state maching
function step() {
	point2 = {.x = 3.0, .y = 0.0}
	reset_led()

	determine_half(point2)
	#debug.print(Count, ":", State)
	#another_counter = another_counter + 1
	#set_led_half(another_counter % 12)
	random_walk()

	#if(size(v.get(DonTable))>= numRobots){
	#	Debug.print("DONE")
	#}
#__________________________________#
}

function reset(){
}
# Execute at exit
function destroy() {
}
